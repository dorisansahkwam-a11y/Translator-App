import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:text_to_speech/text_to_speech.dart';
import 'package:country_flags/country_flags.dart';

class TranslatorPage extends StatefulWidget {
  const TranslatorPage({super.key});

  @override
  State<TranslatorPage> createState() => _TranslatorPageState();
}

class _TranslatorPageState extends State<TranslatorPage> {
  late stt.SpeechToText _speech;
  late TextToSpeech _tts;
  bool _isListening = false;
  String _text = "";
  String _translatedText = " ";
  final List<String> _history = [];
  String dropdownValue = 'two';
  String? selectedLangauge;
  String? selectedToLangauge;
  final Map<String, List<String>> languageGroups = {
    'Ghanaian Local Langauges': [
      'Asante Twi',
      'Akuapem Twi',
      'Fante',
      'Ewe',
      'Dangme',
      'Ga',
      'Nzema',
      'Gonja',
      'Dagbani',
      'Dagaare',
      'Kasem',
      'Gurune (Frafra)',
      'Buli',
      'Kusaal',
      'Mampruli',
      'Sisaala',
      'Chakali',
      'Anufo (Chokosi)',
      'Nafaanra',
      'Avatime',
      'Bimoba',
      'Wasa',
      'Adele',
      'Larteh',
      'Sekpele',
      'Nkonya',
      'Ahanta',
      'Ahlo',
      'Tampulma',
      'Basari',
    ],
    'üåç African Languages': [
      'Swahili',
      'Yoruba',
      'Igbo',
      'Hausa',
      'Zulu',
      'Shona',
      'Amharic',
      'Oromo',
      'Somali',
      'Tigrinya',
      'Berber',
      'Wolof',
      'Lingala',
      'Kinyarwanda',
      'Kirundi',
      'Chichewa',
      'Sesotho',
      'Tswana',
      'Xhosa',
      'Afrikaans',
      'Kikuyu',
      'Bemba',
      'Fula (Fulani)',
      'Kanuri',
      'Swazi',
      'Sango',
      'Comorian',
      'Malagasy',
      'Mauritian Creole',
      'Seychellois Creole',
      'Arabic (Egypt)',
      'Arabic (Sudan)',
      'Khoekhoe',
      'Venda',
      'Sango',
      'Tsonga',
    ],
    'üåê International Languages': [
      'English',
      'French',
      'Spanish',
      'Portuguese',
      'German',
      'Italian',
      'Dutch',
      'Russian',
      'Chinese (Mandarin)',
      'Japanese',
      'Korean',
      'Hindi',
      'Urdu',
      'Arabic(Modern Standard)',
      'Turkish',
      'Greek',
      'Polish',
      'Swedish',
      'Finnish',
      'Danish',
      'Norwegian',
      'Czech',
      'Hungarian',
      'Romanian',
      'Hebrew',
      'Thai',
      'Vietnamese',
      'Indonesian',
      'Malay',
      'Filipino',
      'Bengali',
      'Tamil',
      'Telugu',
      'Persian (Farsi)',
      'Ukrainian',
    ],
  };

  List<DropdownMenuItem<String>> _buildDropdownItems() {
    List<DropdownMenuItem<String>> items = [];
    languageGroups.forEach((category, languages) {
      items.add(
        DropdownMenuItem<String>(
          enabled: false,
          value: category,
          child: Text(
            category,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.blue,
            ),
          ),
        ),
      );
      for (var language in languages) {
        items.add(
          DropdownMenuItem<String>(
            value: language,
            child: Row(
              children: [
                if (category.contains('Ghanaian'))
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('GH'),
                  ),
                if (category.contains('African'))
                  if (language == 'Yoruba' ||
                      language == 'Igbo' ||
                      language == 'Hausa' ||
                      language == 'Kanuri')
                    SizedBox(
                      width: 12,
                      height: 12,
                      child: CountryFlag.fromCountryCode('NG'),
                    ),

                if (language == 'Swahili')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('TZ'),
                  ),
                if (language == 'Zulu' ||
                    language == 'Xhosa' ||
                    language == 'Venda')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ZA'),
                  ),
                if (language == 'Shona')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ZW'),
                  ),
                if (language == 'Amharic' || language == 'Oromo')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ET'),
                  ),
                if (language == 'Somali')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SO'),
                  ),
                if (language == 'Tigrinya')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ER'),
                  ),
                if (language == 'Berber')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('MA'),
                  ),
                if (language == 'Wolof')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SN'),
                  ),
                if (language == 'Lingala')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('CD'),
                  ),
                if (language == 'Kinyarwanda')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('RW'),
                  ),
                if (language == 'Kirundi')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('BI'),
                  ),
                if (language == 'Chichewa')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('MW'),
                  ),
                if (language == 'Sesotho')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('LS'),
                  ),
                if (language == 'Tswana')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('BW'),
                  ),
                if (language == 'Afrikaans')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ZA'),
                  ),
                if (language == 'Kikuyu')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('KE'),
                  ),
                if (language == 'Bemba')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ZM'),
                  ),
                if (language == 'Fula (Fulani)')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SN'),
                  ),
                if (language == 'Sango')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('CF'),
                  ),
                if (language == 'Swazi')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SZ'),
                  ),
                if (language == 'Comorian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('KM'),
                  ),
                if (language == 'Malagasy')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('MG'),
                  ),
                if (language == 'Mauritian Creole')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('MU'),
                  ),
                if (language == 'Seychellois Creole')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SC'),
                  ),
                if (language == 'Arabic (Egypt)')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('EG'),
                  ),
                if (language == 'Arabic (Sudan)')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SD'),
                  ),
                if (language == 'Khoekhoe')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('NA'),
                  ),
                if (language == 'Tsonga')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('MZ'),
                  ),
                if (category.contains('International'))
                  if (language == 'English')
                    SizedBox(
                      width: 12,
                      height: 12,
                      child: CountryFlag.fromCountryCode('GB'),
                    ),
                if (language == 'French')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('FR'),
                  ),
                if (language == 'Spanish')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ES'),
                  ),
                if (language == 'Portuguese')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('PT'),
                  ),
                if (language == 'German')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('DE'),
                  ),
                if (language == 'Italian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('IT'),
                  ),
                if (language == 'Dutch')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('NL'),
                  ),
                if (language == 'Russian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('RU'),
                  ),
                if (language == 'Chinese (Mandarin)')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('CN'),
                  ),
                if (language == 'Japanese')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('JP'),
                  ),
                if (language == 'Korean')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('KR'),
                  ),
                if (language == 'Hindi' ||
                    language == 'Tamil' ||
                    language == 'Telugu')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('IN'),
                  ),
                if (language == 'Urdu')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('PK'),
                  ),
                if (language == 'Arabic(Modern Standard)')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SA'),
                  ),
                if (language == 'Turkish')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('TR'),
                  ),
                if (language == 'Greek')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('GR'),
                  ),
                if (language == 'Polish')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('PL'),
                  ),
                if (language == 'Swedish')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('SE'),
                  ),
                if (language == 'Finnish')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('FI'),
                  ),
                if (language == 'Danish')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('DK'),
                  ),
                if (language == 'Norwegian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('NO'),
                  ),
                if (language == 'Czech')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('CZ'),
                  ),
                if (language == 'Hungarian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('HU'),
                  ),
                if (language == 'Romanian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('RO'),
                  ),
                if (language == 'Hebrew')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('IL'),
                  ),
                if (language == 'Thai')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('TH'),
                  ),
                if (language == 'Vietnamese')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('VN'),
                  ),
                if (language == 'Indonesian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('ID'),
                  ),
                if (language == 'Malay')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('MY'),
                  ),
                if (language == 'Filipino')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('PH'),
                  ),
                if (language == 'Bengali')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('BD'),
                  ),
                if (language == 'Persian (Farsi)')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('IR'),
                  ),
                if (language == 'Ukrainian')
                  SizedBox(
                    width: 12,
                    height: 12,
                    child: CountryFlag.fromCountryCode('UA'),
                  ),
                Text(language, style: TextStyle(letterSpacing: 1.0)),
              ],
            ),
          ),
        );
      }
    });
    return items;
  }

  @override
  void initState() {
    super.initState();
    _speech = stt.SpeechToText();
    _tts = TextToSpeech();
  }

  void _listen() async {
    if (!_isListening) {
      bool available = await _speech.initialize();
      if (available) {
        setState(() => _isListening = true);
        _speech.listen(
          onResult: (result) {
            setState(() {
              _text = result.recognizedWords;
            });
          },
        );
      }
    } else {
      setState(() => _isListening = false);
      _speech.stop();
    }
  }

  void _translateText() {
    if (_text.isEmpty) return;
    setState(() {
      _translatedText = "Translated version of: $_text"; // Placeholder
      _history.insert(0, _translatedText);
    });
  }

  void _speakTranslation() {
    if (_translatedText.isNotEmpty) {
      _tts.speak(_translatedText);
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        body: SafeArea(
          child: Column(
            children: [
              //top color with wave background
              ClipPath(
                clipper: WaveClipper(),
                child: Container(
                  height: 220,
                  width: double.infinity,
                  color: Colors.blue,
                  alignment: Alignment.center,
                  child: const Text(
                    "Global Translator Hub",
                    style: TextStyle(
                      fontSize: 33,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                      letterSpacing: 1.2,
                    ),
                  ),
                ),
              ),
              SizedBox(height: 5, width: 5),
              Padding(
                padding: EdgeInsets.all(20.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    ElevatedButton(
                      onPressed: () {},
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 7,
                          vertical: 7,
                        ),
                        minimumSize: Size(15, 15),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(5),
                        ),
                      ),
                      child: DropdownButtonHideUnderline(
                        child: DropdownButton<String>(
                          value: selectedLangauge,
                          hint: const Text(
                            "From: Select Language",
                            style: TextStyle(
                              color: Colors.blue,
                              fontSize: 12.0,
                            ),
                          ),
                          items: _buildDropdownItems(),
                          onChanged: (String? newValue) {
                            setState(() {
                              selectedLangauge = newValue;
                            });
                          },
                        ),
                      ),
                    ),

                    const SizedBox(width: 10.0),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        ElevatedButton(
                        onPressed: () {},
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 7,
                            vertical: 7,
                          ),
                          minimumSize: Size(10, 10),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(5),
                          ),
                        ),
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<String>(
                            value: selectedToLangauge,
                            hint: const Text(
                              "To: Select Language",
                              style: TextStyle(
                                color: Colors.blue,
                                fontSize: 12.0,
                              ),
                            ),
                            items: _buildDropdownItems(),
                            onChanged: (String? newValue) {
                              setState(() {
                                selectedToLangauge = newValue;
                              });
                            },
                          ),
                        ),
                      ),
                      ],
                    ),
                  ],
                ),
              ),
          
            
          

  SizedBox(width: 10.0),
        // üó£ Speak or Type section
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              const Text(
                "Speak or Type Your Text:",
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 10),

              // ‚úç Text field
              TextField(
                onChanged: (value) => _text = value,
                controller: TextEditingController(text: _text),
                decoration: InputDecoration(
                  hintText: 'Enter or speak text...',
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                  suffixIcon: IconButton(
                    icon: Icon(
                      _isListening ? Icons.mic : Icons.mic_none,
                      color: _isListening ? Colors.red : Colors.blue,
                      size: 30,
                    ),
                    onPressed: _listen,
                  ),
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 15),

              // üîò Translate button
              ElevatedButton.icon(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 12,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                onPressed: _translateText,
                icon: const Icon(FontAwesomeIcons.language, size: 20),
                label: const Text(
                  "Translate",
                  style: TextStyle(fontSize: 18, color: Colors.white),
                ),
              ),

              const SizedBox(height: 20),

              // üìú Translated text
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    const Text(
                      "Translated Text:",
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Text(
                      _translatedText,
                      style: const TextStyle(fontSize: 16),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 10),
                    IconButton(
                      icon: const Icon(Icons.volume_up, color: Colors.blue),
                      onPressed: _speakTranslation,
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 20),

              // üïì Translation history
              if (_history.isNotEmpty)
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      "Translation History:",
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Container(
                      height: 120,
                      decoration: BoxDecoration(
                        color: Colors.grey.shade200,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: ListView.builder(
                        itemCount: _history.length,
                        itemBuilder: (context, index) {
                          return ListTile(
                            leading: const Icon(
                              Icons.history,
                              color: Colors.blue,
                            ),
                            title: Text(_history[index]),
                          );
                        },
                      ),
                    ),
                  ],
                ),
            ],
          ),
        ),
            ]
          ),
    ),
    )
    );
  }
}

class SpeakLanguage {
  SpeakLanguage(String? selectedLangauge);
}

class WaveClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    Path path = Path();
    path.lineTo(0, size.height - 60);

    // wave curve
    var firstControlPoint = Offset(size.width / 4, size.height);
    var firstEndPoint = Offset(size.width / 2, size.height - 60);

    path.quadraticBezierTo(
      firstControlPoint.dx,
      firstControlPoint.dy,
      firstEndPoint.dx,
      firstEndPoint.dy,
    );

    var secondControlPoint = Offset(size.width * 3 / 4, size.height - 120);
    var secondEndPoint = Offset(size.width, size.height - 60);
    path.quadraticBezierTo(
      secondControlPoint.dx,
      secondControlPoint.dy,
      secondEndPoint.dx,
      secondEndPoint.dy,
    );

    path.lineTo(size.width, 0);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldDelegate) => false;
}
