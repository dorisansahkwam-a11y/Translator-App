import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter/services.dart';
import 'package:intl_phone_field/intl_phone_field.dart';
import 'translator_page.dart';
import 'package:text_to_speech/text_to_speech.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;

//Uppercase field
class UpperCaseTextFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
    TextEditingValue oldValue,
    TextEditingValue newValue,
  ) {
    // Force everything typed into uppercase
    return newValue.copyWith(
      text: newValue.text.toUpperCase(),
      selection: newValue.selection,
    );
  }
}

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  bool _obscurePassword = true;
  final _formkey = GlobalKey<FormState>();
  late stt.SpeechToText _speech;
  late TextToSpeech _tts;
  bool _isListening = false;
  String _text = "";
  final TextEditingController _emailController = TextEditingController();


  @override
  void initState() {
    super.initState();
    _speech = stt.SpeechToText();
    _tts = TextToSpeech();
  }
    void _listen() async {
      if (!_isListening) {
        bool available = await _speech.initialize();
        if (available) {
          setState(() => _isListening = true);
          _speech.listen(
            onResult: (result) {
              setState(() {
                _text = result.recognizedWords;
                 _emailController.selection = TextSelection.fromPosition(
              TextPosition(offset: _emailController.text.length),
            );
              });
            },
          );
        }
      } else {
        setState(() => _isListening = false);
        _speech.stop();
      }
    }
  

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Builder(
        builder: (context) => Scaffold(
          backgroundColor: Colors.white,
          body: SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(24.0),
              child: Form(
                key: _formkey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Center(
                      child: CircleAvatar(
                        radius: 30,
                        backgroundColor: Colors.blue.shade100,
                        child: Icon(
                          Icons.graphic_eq,
                          color: Colors.blue,
                          size: 30.0,
                        ),
                      ),
                    ),
                    const SizedBox(height: 30.0),

                    //title
                    Text(
                      "Start your journey from here",
                      style: TextStyle(
                        color: Colors.black,
                        fontSize: 29.0,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 5.0),
                    Text(
                      "Sign up for free!",
                      style: TextStyle(color: Colors.black, fontSize: 12.0),
                    ),
                    const SizedBox(height: 30),

                    //email field
                    TextFormField(
                      controller: _emailController,
                      validator: (email) {
                        if (email == null || email.isEmpty) {
                          return 'Please enter your email';
                        } else if (!RegExp(
                          r'^[\w-\.]+@([\w-]+\.)[\w-].{2,4}$',
                        ).hasMatch(email)) {
                          return 'Please enter a valid email';
                        }
                        return null;
                      },
                      decoration: InputDecoration(
                        labelText: "Email",
                        prefixIcon: Icon(Icons.email_outlined),
                        hintText: 'nevaeh.simmons@example.com',
                        hintStyle: TextStyle(color: Colors.grey),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        suffixIcon: IconButton(
                          icon: Icon(
                            _isListening ? Icons.mic : Icons.mic_none,
                            color: _isListening ? Colors.black : Colors.blue,
                            size: 30,
                          ),
                          onPressed: _listen,
                        ),
                      ),
                    ),

                    const SizedBox(height: 20),
                    IntlPhoneField(
                      validator: (phonenumber) {
                        if (phonenumber == null) {
                          return 'Please enter your phone number';
                        } else {
                          return null;
                        }
                      },
                      keyboardType: TextInputType.phone,
                      decoration: InputDecoration(
                        labelText: 'Phone number',
                        prefixIcon: Icon(Icons.phone_outlined),
                        hintText: 'phone number',
                        hintStyle: TextStyle(
                          color: Colors.grey,
                          fontSize: 10.0,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    //password field
                    TextFormField(
                      validator: (password) {
                        if (password == null || password.isEmpty) {
                          return 'Please enter your password';
                        } else if (password.length > 12) {
                          return 'Password should be at  most 12 characters';
                        } else if (!RegExp(
                          r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$&*]).{1,12}$',
                        ).hasMatch(password)) {
                          return  'Password must contain lower case, upper case, number & symbol';
                        }else {
                          return null;
                        }
                      },
                      inputFormatters: [
                        LengthLimitingTextInputFormatter(12),
                        UpperCaseTextFormatter(),
                      ],
                      obscureText: _obscurePassword,
                      decoration: InputDecoration(
                        labelText: "Password",
                        prefixIcon: Icon(Icons.lock_outlined),
                        hintText: '............',
                        hintStyle: TextStyle(
                          color: Colors.black,
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        suffixIcon: IconButton(
                          icon: Icon(
                            _obscurePassword
                                ? Icons
                                      .visibility_off_outlined // if hidden
                                : Icons.visibility_outlined, // if visible
                          ),
                          onPressed: () {
                            setState(() {
                              _obscurePassword = !_obscurePassword; // toggle
                            });
                          },
                        ),
                      ),
                    ),
                    const SizedBox(height: 30.0),

                    //sign up
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: () {
                          if (_formkey.currentState!.validate()) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Form is valid'),
                                backgroundColor: Colors.green,
                              ),
                            );
                             Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => TranslatorPage(),
                            ) 
                          );
                          } else {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text('Form is invalid'),
                                backgroundColor: Colors.red,
                              ),
                            );
                          }
                        },
                          
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          padding: const EdgeInsets.symmetric(vertical: 15),
                        ),
                        child: Text(
                          "Sign Up",
                          style: TextStyle(fontSize: 16, color: Colors.white),
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // login link
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text("Already have an account?"),
                        TextButton(onPressed: () {}, child: Text("Log in")),
                      ],
                    ),
                    const SizedBox(height: 20.0),
                    //divider lone with or
                    Row(
                      children: [
                        Expanded(child: Divider(thickness: 1)),
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 8.0),
                          child: Text("OR"),
                        ),
                        Expanded(child: Divider(thickness: 1)),
                      ],
                    ),
                    const SizedBox(height: 20),

                    //social buttons
                    _buildSocialButton(
                      FontAwesomeIcons.apple,
                      "Continue with Apple",
                    ),
                    const SizedBox(height: 10),
                    _buildSocialButton(
                      FontAwesomeIcons.google,
                      "Continue with Google",
                    ),
                    const SizedBox(height: 10),
                    _buildSocialButton(
                      FontAwesomeIcons.facebook,
                      "Continue with Facebook",
                    ),
                    const SizedBox(height: 10),
                    _buildSocialButton(
                      FontAwesomeIcons.twitter,
                      "Continue with Twitter",
                    ),
                    const SizedBox(height: 10),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSocialButton(IconData icon, String text) {
    return OutlinedButton(
      onPressed: () {},
      style: OutlinedButton.styleFrom(
        minimumSize: const Size(double.infinity, 50),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
      child: Stack(
        alignment: Alignment.center,
        children: [
          //left aligned icon
          Row(
            mainAxisAlignment: MainAxisAlignment.start, // align left
            children: [Icon(icon, size: 24)],
          ), // the icon first
          //centered text
          Text(
            text,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
          ), // 👈 adds space
        ], // the text after space
      ),
    );
  }
}
